import java.awt.Graphics;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

public class Gobang {
    BufferedImage table;
    BufferedImage black;
    BufferedImage white;
    BufferedImage selected;
    private static int BOARD_SIZE = 15;
    private final int TABLE_WIDTH = 530;
    private final int TABLE_HEIGHT = 536;
    private final int RATE = TABLE_WIDTH / BOARD_SIZE;
    private final int X_OFFSET = 5;
    private final int Y_OFFSET = 6;

    private String[][] board = new String[BOARD_SIZE][BOARD_SIZE];//黑0白1无-1
    JFrame f = new JFrame("五子棋游戏");
    ChessBoard chessBoard= new ChessBoard();
    private int selectedX = -1;
    private int selectedY = -1;
    private String result = "nobody";
    private boolean FirstNextValue = true;//代表先后，true是黑，false是白
    public void init() throws IOException {
        table = ImageIO.read(new File("C:/Users/hasee/Desktop/source/Gobang/image/board.jpg"));
        black = ImageIO.read(new File("C:/Users/hasee/Desktop/source/Gobang/image/black.gif"));
        white = ImageIO.read(new File("C:/Users/hasee/Desktop/source/Gobang/image/white.gif"));
        selected = ImageIO.read(new File("C:/Users/hasee/Desktop/source/Gobang/image/selected.gif"));
        for (int i = 0; i < BOARD_SIZE; i++) {
            for (int j = 0; j < BOARD_SIZE; j++) {
                board[i][j] = "-1";
            }
        }
        chessBoard.setPreferredSize(new Dimension(TABLE_WIDTH,TABLE_HEIGHT));
        chessBoard.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int xPos = (int)((e.getX() - X_OFFSET) / RATE);
                int yPos = (int)((e.getY() - Y_OFFSET) / RATE);
                if (board[xPos][yPos] == "-1")
                {
                    if (FirstNextValue) {
                        board[xPos][yPos] = "0";
                        FirstNextValue = false;
                    }
                    else{
                        board[xPos][yPos] = "1";
                        FirstNextValue = true;
                    }
                }
                chessBoard.repaint();
                //判断胜利
                result = winnerOfGoBang(board,"0","1");
                if (result.equals("nobody")){}
                else{
                    chessBoard.repaint();
                }
            }
            public void mouseExited(MouseEvent e){
                selectedX = -1;
                selectedY = -1;
                chessBoard.repaint();
            }
        });
        chessBoard.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                selectedX = (e.getX() - X_OFFSET) / RATE;
                selectedY = (e.getY() - Y_OFFSET) / RATE;
                chessBoard.repaint();
            }
        });
        f.add(chessBoard);
        f.pack();
        f.setVisible(true);
    }

    /**
     * @discription 判断String数组中是否有胜利的一方
     * @param String[][],First,Second
     * @return String
     *
     */
    public String winnerOfGoBang(String[][] s,String BlackSide,String WhiteSide){
        String winner = "nobody";
        for (int i = 2; i < s.length - 2; i++) {
            for (int j = 2; j < s.length - 2; j++) {

                if (s[i][j].equals(BlackSide) && s[i-2][j].equals(BlackSide) && s[i-1][j].equals(BlackSide)
                        && s[i+1][j].equals(BlackSide) &&s[i+2][j].equals(BlackSide)){
                    winner = "BlackSide";
                    return winner;
                }
                if (s[i][j].equals(BlackSide) && s[i][j-2].equals(BlackSide) && s[i][j-1].equals(BlackSide)
                        && s[i][j+2].equals(BlackSide) &&s[i][j+2].equals(BlackSide)){
                    winner = "BlackSide";
                    return winner;
                }
                if (s[i][j].equals(BlackSide) && s[i-2][j-2].equals(BlackSide) && s[i-1][j-1].equals(BlackSide)
                        && s[i+1][j+1].equals(BlackSide) &&s[i+2][j+2].equals(BlackSide)){
                    winner = "BlackSide";
                    return winner;
                }
                if (s[i][j].equals(BlackSide) && s[i-2][j+2].equals(BlackSide) && s[i-1][j+1].equals(BlackSide)
                        && s[i+1][j-1].equals(BlackSide) &&s[i+2][j-2].equals(BlackSide)){
                    winner = "BlackSide";
                    return winner;
                }
                if (s[i][j].equals(WhiteSide) && s[i-2][j].equals(WhiteSide) && s[i-1][j].equals(WhiteSide)
                        && s[i+1][j].equals(WhiteSide) &&s[i+2][j].equals(WhiteSide)){
                    winner = "WhiteSide";
                    return winner;
                }
                if (s[i][j].equals(WhiteSide) && s[i][j-2].equals(WhiteSide) && s[i][j-1].equals(WhiteSide)
                        && s[i][j+2].equals(WhiteSide) &&s[i][j+2].equals(WhiteSide)){
                    winner = "WhiteSide";
                    return winner;
                }
                if (s[i][j].equals(WhiteSide) && s[i-2][j-2].equals(WhiteSide) && s[i-1][j-1].equals(WhiteSide)
                        && s[i+1][j+1].equals(WhiteSide) &&s[i+2][j+2].equals(WhiteSide)){
                    winner = "WhiteSide";
                    return winner;
                }
                if (s[i][j].equals(WhiteSide) && s[i-2][j+2].equals(WhiteSide) && s[i-1][j+1].equals(WhiteSide)
                        && s[i+1][j-1].equals(WhiteSide) &&s[i+2][j-2].equals(WhiteSide)){
                    winner = "WhiteSide";
                    return winner;
                }

            }
        }
        return winner;
    }
    public boolean hasWinner(String[][] s,String BlackSide,String WhiteSide){
        String result1 = winnerOfGoBang(s,BlackSide,WhiteSide);
        if (result1.equals("nobody")){
            return false;
        }
        return true;
    }
    public static void main(String[] args) throws IOException {
        Gobang gb = new Gobang();
        gb.init();
    }
    class ChessBoard extends JPanel{
        public void paint(Graphics g){
            if(result.equals("BlackSide")){
                g.setColor(new Color(255,0,0));
                g.setFont(new Font("Times",Font.BOLD,30));
                g.drawString("游戏已结束！"+'\n'+"胜利者是：黑方", 50, 200);
            }
            else if(result.equals("WhiteSide")){
                g.setColor(new Color(255,0,0));
                g.setFont(new Font("Times",Font.BOLD,30));
                g.drawString("游戏已结束！"+'\n'+"胜利者是：白方", 50, 200);
            }
            else{
                g.drawImage(table,0,0,null);
                if(selectedX >= 0 && selectedY >=0)
                    g.drawImage(selected,selectedX * RATE + X_OFFSET,selectedY * RATE + Y_OFFSET,null);
                for (int i = 0; i < BOARD_SIZE; i++) {
                    for (int j = 0; j < BOARD_SIZE; j++) {
                        if(board[i][j].equals("0")){
                            g.drawImage(black,i * RATE + X_OFFSET,j * RATE + Y_OFFSET,null);
                        }
                        if(board[i][j].equals("1")){
                            g.drawImage(white,i * RATE + X_OFFSET,j * RATE + Y_OFFSET,null);
                        }
                    }
                }
            }
        }
    }
}
